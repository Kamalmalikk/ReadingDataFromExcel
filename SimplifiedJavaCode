import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.*;
import java.io.File;
import java.io.IOException;
//import java.util.Iterator;

public class ExcelData 
{
	public static final String SAMPLE_XLSX_FILE_PATH = "/Users/kamalmalik/Desktop/TestData.xlsx";

	public static void main(String[] args) throws IOException, InvalidFormatException 
	{

		// Creating a Workbook from an Excel file (.xls or .xlsx)
	    Workbook workbook = WorkbookFactory.create(new File(SAMPLE_XLSX_FILE_PATH));

	    // Retrieving the number of sheets in the Workbook
	    System.out.println("Workbook has " + workbook.getNumberOfSheets() + " Sheets:");

	    // Iterating over all the sheets in the workbook using for-each loop
	    System.out.println("Retrieving Sheets using for-each loop:-");
        for(Sheet sheet: workbook) 
        {
            System.out.println("=> " + sheet.getSheetName());
        }
        
        // Iterating over all the rows and columns in a Sheet
        // Getting the Sheet at index zero
        Sheet sheet = workbook.getSheetAt(0);

        // Create a DataFormatter to format and get each cell's value as String
        DataFormatter dataFormatter = new DataFormatter();
        
        // Use a for-each loop to iterate over the rows and columns
        System.out.println("\n\nIterating over Rows and Columns:"); 
        
     // Decide which rows to process
        int rowStart = 9; //Math.min(15, sheet.getFirstRowNum());
        int rowEnd = 10; //Math.max(1400, sheet.getLastRowNum());

        for (int rowNum = rowStart; rowNum < rowEnd; rowNum++) 
        {
           Row r = sheet.getRow(rowNum);
           int lastColumn = 11; //Math.max(r.getLastCellNum(), MY_MINIMUM_COLUMN_COUNT);
           for (int cn = 3; cn < lastColumn; cn++) //0 was there instead of 4
           {
              Cell c = r.getCell(cn); // cn, RETURN_BLANK_AS_NULL
              if (c != null)
              {
            	  	printCellValue(c);
            	  	//CalculateCellValue(c);
              }
           }
        }			   
        workbook.close();
	}
	
	// Retrieving Cell values by CellType
    private static void printCellValue(Cell cell) 
    {
    		switch (cell.getCellType())
        {
        		case NUMERIC:
                if (DateUtil.isCellDateFormatted(cell)) 
                {
                    System.out.print(cell.getDateCellValue());
                } 
                else 
                {
                    System.out.print(cell.getNumericCellValue());
                }
                break;
         }
    	     System.out.print("\t");
	}
    
    public static void CalculateCellValue(Cell cell)
    {
    		switch (cell.getCellType())
    		{
    			case NUMERIC:
    				for (int i=0; i<8; i++)
    				{
    					double tmp2 = cell.getNumericCellValue();
    					System.out.println(tmp2);
    				}
    		}
    		System.out.print("\t");
    }
}
